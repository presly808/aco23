import groovy.json.JsonSlurper

allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task wrapper(type: Wrapper) {
        gradleVersion = '4.3.1'
    }

    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                excludes = ['*view.*', '*exclude.*']
                element = "CLASS"
                limit {
                    counter = "LINE"
                    minimum = 0.50
                }
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    check.dependsOn jacocoTestReport

}

// ./gradlew -PmyModule=SerhiiBilobrov -Ptask=week1 copyTask
task copyTask {
    doLast {
        def module_with_tests = "functional-tests"

        if (project.hasProperty("task") && project.hasProperty("myModule")) {

            copy {
                from "$module_with_tests/src/test/java/$task"
                into "$myModule/src/test/java/$task"
            }

            copy {
                from "$module_with_tests/src/main/java/$task"
                into "$myModule/src/main/java/$task"
            }
            println "The Common Tests of $task have been copied into $myModule"
        }
    }

}

task showAllTasks() {
    doLast {
        def parsed = parseJson('functional-tests/course-tasks.json')
        def tasks = parsed.tasks;
        for(task in tasks){
            println task
        }
    }
}

def parseJson(path) {
    def jsonFile = file(path)
    def parsedJson = new JsonSlurper().parseText(jsonFile.text)
    return parsedJson
}

task testGitC {
    doLast {
        println "CHECK GIT"
        exec {
            commandLine 'git', 'log', '-n', '1'
        }
    }
}